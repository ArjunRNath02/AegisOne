from PySide6.QtWidgets import (QDialog, QLabel, QPushButton, QVBoxLayout, QHBoxLayout,
                               QLineEdit, QTabWidget, QWidget, QTableWidget, QTableWidgetItem,
                               QHeaderView, QComboBox)
from PySide6.QtCore import Qt
import sqlite3
from src.extensions.db_handler import (insert_type_master, delete_type_master, get_all_type_master,
                                   insert_file_name_db, delete_file_name_db,
                                   insert_file_signature_db, delete_file_signature_db,
                                   insert_file_content_db, delete_file_content_db)

DB_NAME = './src/db/antivirus.sqlite'

class MalwareTypeDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Malware Types")
        self.setFixedSize(750, 550)

        self.tables = {}  # Dictionary to store table widgets
        
        self.layout = QVBoxLayout(self)
        self.tab_widget = QTabWidget()
        self.layout.addWidget(self.tab_widget)
        
        self.create_type_tab()
        self.create_name_tab()
        self.create_signature_tab()
        self.create_content_tab()
    
    def create_type_tab(self):
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        self.type_entry = QLineEdit()
        self.type_entry.setPlaceholderText("Enter Type Name")
        self.type_entry.setFixedWidth(500)
        self.add_type_button = QPushButton("Add Type")
        self.add_type_button.clicked.connect(self.add_type)
        
        input_layout = QHBoxLayout()
        input_layout.addWidget(self.type_entry)
        input_layout.addWidget(self.add_type_button)
        
        self.type_table = QTableWidget()
        self.type_table.setColumnCount(3)
        self.type_table.setHorizontalHeaderLabels(["S.No.", "Name", "Delete"])
        self.type_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        
        layout.addLayout(input_layout)
        layout.addWidget(self.type_table)
        
        self.tab_widget.addTab(tab, "Type")
        self.refresh_type_table()
    
    def refresh_type_table(self):
        rows = [(t["id"], t["type_name"]) for t in get_all_type_master()]
        self.type_table.setRowCount(len(rows))
        for i, row in enumerate(rows):
            self.type_table.setItem(i, 0, QTableWidgetItem(str(row[0])))
            self.type_table.setItem(i, 1, QTableWidgetItem(row[1]))
            delete_button = QPushButton("Delete")
            delete_button.clicked.connect(lambda _, row_id=row[0]: self.delete_type(row_id))
            self.type_table.setCellWidget(i, 2, delete_button)
    
    def add_type(self):
        type_name = self.type_entry.text().strip()
        if type_name:
            insert_type_master(type_name)
            self.refresh_type_table()

    def delete_type(self, type_id):
        delete_type_master(type_id)
        self.refresh_type_table()
    
    def execute_query(self, query, params=()):
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(query, params)
        rows = cursor.fetchall()
        conn.close()
        return rows
    
    def create_generic_tab(self, tab_name, placeholder_text, insert_func, delete_func):
        tab = QWidget()
        layout = QVBoxLayout(tab)

        entry = QLineEdit()
        entry.setFixedWidth(600)
        entry.setPlaceholderText(placeholder_text)
        type_combo = QComboBox()
        self.refresh_type_options(type_combo)

        add_button = QPushButton("Add")
        add_button.clicked.connect(lambda: self.add_entry(entry, type_combo, insert_func, delete_func, tab_name))

        input_layout = QHBoxLayout()
        input_layout.addWidget(entry)
        input_layout.addWidget(type_combo)
        input_layout.addWidget(add_button)

        table = QTableWidget()
        table.setColumnCount(3)
        table.setHorizontalHeaderLabels(["Data", "Malware Type", "Delete"])
        table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        layout.addLayout(input_layout)
        layout.addWidget(table)

        self.tab_widget.addTab(tab, tab_name)
        
        self.tables[tab_name] = table  # Store the table in a dictionary

        self.refresh_table(table, tab_name, delete_func)  # Ensure correct delete function is passed

    def create_name_tab(self):
        self.create_generic_tab("Name", "Enter Malware Name", insert_file_name_db, delete_file_name_db)

    def create_signature_tab(self):
        self.create_generic_tab("Signature", "Enter Malware Signature", insert_file_signature_db, delete_file_signature_db)

    def create_content_tab(self):
        self.create_generic_tab("Content", "Enter Malware Content", insert_file_content_db, delete_file_content_db)

    def refresh_type_options(self, combo_box):
        combo_box.clear()
        combo_box.addItems([t["type_name"] for t in get_all_type_master()])
    
    def refresh_table(self, table, tab_name, delete_func):
        table_mapping = {
            "Name": ("file_name_db", "file_name"),
            "Signature": ("file_signature_db", "file_signature"),
            "Content": ("file_content_db", "file_content")
        }
        table_name, column_name = table_mapping.get(tab_name, ("", ""))

        query = f"""
            SELECT fc.{column_name}, tm.type_name, fc.id
            FROM {table_name} fc
            JOIN type_master tm ON fc.type_id = tm.id
        """
        
        rows = self.execute_query(query)
        table.setRowCount(len(rows))

        for i, row in enumerate(rows):
            table.setItem(i, 0, QTableWidgetItem(row[0]))  
            table.setItem(i, 1, QTableWidgetItem(row[1]))

            delete_button = QPushButton("Delete")
            delete_button.clicked.connect(lambda _, row_id=row[2], tn=tab_name, df=delete_func: self.delete_entry(row_id, df, tn))
            table.setCellWidget(i, 2, delete_button)

    def add_entry(self, entry, type_combo, insert_func, delete_func, tab_name):
        value = entry.text().strip()
        type_name = type_combo.currentText()
        if value and type_name:
            type_id = next(t["id"] for t in get_all_type_master() if t["type_name"] == type_name)
            insert_func(type_id, value)
            self.refresh_table(self.tables[tab_name], tab_name, delete_func)
    
    def delete_entry(self, entry_id, delete_func, tab_name):
        #print(f"DEBUG: delete_func = {delete_func}, entry_id = {entry_id}, tab_name = {tab_name}")  # Debug print

        if callable(delete_func):  # Ensure it's a function before calling
            delete_func(entry_id) 
            self.refresh_table(self.tables[tab_name], tab_name, delete_func)  # Refresh table after deletion
        else:
            print(f"ERROR: delete_func is not callable for tab {tab_name}")
